{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"E:\\\\MediKeep\\\\screens\\\\Auth\\\\index.jsx\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport firebase from \"firebase\";\nimport * as Google from \"expo-google-app-auth\";\n\nvar Auth = function Auth(_ref) {\n  var navigation = _ref.navigation;\n  firebase.auth().onAuthStateChanged(function (user) {\n    if (user != null) {\n      console.log(\"We are authenticated now!\");\n    }\n  });\n  var provider = new firebase.auth.GoogleAuthProvider();\n\n  var myGoogleSignIn = function myGoogleSignIn() {\n    console.log(\"my google\");\n    firebase.auth().signInWithPopup(provider).then(function (result) {\n      var token = result.credential.accessToken;\n      var user = result.user;\n      console.log(user);\n    }).catch(function (error) {\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      var email = error.email;\n      var credential = error.credential;\n    });\n  };\n\n  var isUserEqual = function isUserEqual(googleUser, firebaseUser) {\n    if (firebaseUser) {\n      var providerData = firebaseUser.providerData;\n\n      for (var i = 0; i < providerData.length; i++) {\n        if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  var onSignIn = function onSignIn(googleUser) {\n    console.log(\"Google Auth Response\", googleUser);\n    var unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {\n      unsubscribe();\n\n      if (!isUserEqual(googleUser, firebaseUser)) {\n        var credential = firebase.auth.GoogleAuthProvider.credential(googleUser.idToken, googleUser.accessToken);\n        firebase.auth().signInAndRetrieveDataWithCredential(credential).then(function (result) {\n          console.log(\"user signed in \");\n\n          if (result.additionalUserInfo.isNewUser) {\n            firebase.database().ref(\"/users/\" + result.user.uid).set({\n              gmail: result.user.email,\n              profile_picture: result.additionalUserInfo.profile.picture,\n              first_name: result.additionalUserInfo.profile.given_name,\n              last_name: result.additionalUserInfo.profile.family_name,\n              created_at: Date.now()\n            }).then(function (snapshot) {});\n          } else {\n            firebase.database().ref(\"/users/\" + result.user.uid).update({\n              last_logged_in: Date.now()\n            });\n          }\n        }).catch(function (error) {\n          var errorCode = error.code;\n          var errorMessage = error.message;\n          var email = error.email;\n          var credential = error.credential;\n        });\n      } else {\n        console.log(\"User already signed-in Firebase.\");\n      }\n    });\n  };\n\n  var signInWithGoogleAsync = function signInWithGoogleAsync() {\n    var _await$Google$logInAs, type, accessToken, user;\n\n    return _regeneratorRuntime.async(function signInWithGoogleAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"new attempt\");\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Google.logInAsync({\n              androidClientId: \"858762695063-8u1nmkpkcm54ierem1opbefatjb6qq1t.apps.googleusercontent.com\",\n              behavior: \"web\",\n              scopes: [\"profile\", \"email\"]\n            }));\n\n          case 4:\n            _await$Google$logInAs = _context.sent;\n            type = _await$Google$logInAs.type;\n            accessToken = _await$Google$logInAs.accessToken;\n            user = _await$Google$logInAs.user;\n\n            if (type === \"success\") {\n              onSignIn(result);\n              console.log(user);\n            }\n\n            _context.next = 16;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(\"error\");\n            console.log(_context.t0);\n            return _context.abrupt(\"return\", {\n              error: true\n            });\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 11]], Promise);\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    title: \"Sign in with Google\",\n    onPress: function onPress() {\n      signInWithGoogleAsync();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Auth;","map":{"version":3,"sources":["E:/MediKeep/screens/Auth/index.jsx"],"names":["React","firebase","Google","Auth","navigation","auth","onAuthStateChanged","user","console","log","provider","GoogleAuthProvider","myGoogleSignIn","signInWithPopup","then","result","token","credential","accessToken","catch","error","errorCode","code","errorMessage","message","email","isUserEqual","googleUser","firebaseUser","providerData","i","length","providerId","PROVIDER_ID","uid","getBasicProfile","getId","onSignIn","unsubscribe","idToken","signInAndRetrieveDataWithCredential","additionalUserInfo","isNewUser","database","ref","set","gmail","profile_picture","profile","picture","first_name","given_name","last_name","family_name","created_at","Date","now","snapshot","update","last_logged_in","signInWithGoogleAsync","logInAsync","androidClientId","behavior","scopes","type","flex","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nimport { View, Button } from \"react-native\";\r\nimport firebase from \"firebase\";\r\nimport * as Google from \"expo-google-app-auth\";\r\n\r\nconst Auth = ({ navigation }) => {\r\n  // Check if user is already logged In.\r\n  firebase.auth().onAuthStateChanged((user) => {\r\n    if (user != null) {\r\n      console.log(\"We are authenticated now!\");\r\n    }\r\n\r\n    // Do other things\r\n  });\r\n\r\n  var provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  const myGoogleSignIn = () => {\r\n    console.log(\"my google\");\r\n    firebase\r\n      .auth()\r\n      .signInWithPopup(provider)\r\n      .then((result) => {\r\n        // This gives you a Google Access Token. You can use it to access the Google API.\r\n        var token = result.credential.accessToken;\r\n        // The signed-in user info.\r\n        var user = result.user;\r\n        console.log(user);\r\n        // ...\r\n      })\r\n      .catch(function (error) {\r\n        // Handle Errors here.\r\n        var errorCode = error.code;\r\n        var errorMessage = error.message;\r\n        // The email of the user's account used.\r\n        var email = error.email;\r\n        // The firebase.auth.AuthCredential type that was used.\r\n        var credential = error.credential;\r\n        // ...\r\n      });\r\n  };\r\n\r\n  const isUserEqual = (googleUser, firebaseUser) => {\r\n    if (firebaseUser) {\r\n      var providerData = firebaseUser.providerData;\r\n      for (var i = 0; i < providerData.length; i++) {\r\n        if (\r\n          providerData[i].providerId ===\r\n            firebase.auth.GoogleAuthProvider.PROVIDER_ID &&\r\n          providerData[i].uid === googleUser.getBasicProfile().getId()\r\n        ) {\r\n          // We don't need to reauth the Firebase connection.\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n  const onSignIn = (googleUser) => {\r\n    console.log(\"Google Auth Response\", googleUser);\r\n    // We need to register an Observer on Firebase Auth to make sure auth is initialized.\r\n    var unsubscribe = firebase\r\n      .auth()\r\n      .onAuthStateChanged(function (firebaseUser) {\r\n        unsubscribe();\r\n        // Check if we are already signed-in Firebase with the correct user.\r\n        if (!isUserEqual(googleUser, firebaseUser)) {\r\n          // Build Firebase credential with the Google ID token.\r\n          var credential = firebase.auth.GoogleAuthProvider.credential(\r\n            googleUser.idToken,\r\n            googleUser.accessToken\r\n          );\r\n          // Sign in with credential from the Google user.\r\n          firebase\r\n            .auth()\r\n            .signInAndRetrieveDataWithCredential(credential)\r\n            .then(function (result) {\r\n              console.log(\"user signed in \");\r\n              if (result.additionalUserInfo.isNewUser) {\r\n                firebase\r\n                  .database()\r\n                  .ref(\"/users/\" + result.user.uid)\r\n                  .set({\r\n                    gmail: result.user.email,\r\n                    profile_picture: result.additionalUserInfo.profile.picture,\r\n                    first_name: result.additionalUserInfo.profile.given_name,\r\n                    last_name: result.additionalUserInfo.profile.family_name,\r\n                    created_at: Date.now(),\r\n                  })\r\n                  .then(function (snapshot) {\r\n                    // console.log('Snapshot', snapshot);\r\n                  });\r\n              } else {\r\n                firebase\r\n                  .database()\r\n                  .ref(\"/users/\" + result.user.uid)\r\n                  .update({\r\n                    last_logged_in: Date.now(),\r\n                  });\r\n              }\r\n            })\r\n            .catch(function (error) {\r\n              // Handle Errors here.\r\n              var errorCode = error.code;\r\n              var errorMessage = error.message;\r\n              // The email of the user's account used.\r\n              var email = error.email;\r\n              // The firebase.auth.AuthCredential type that was used.\r\n              var credential = error.credential;\r\n              // ...\r\n            });\r\n        } else {\r\n          console.log(\"User already signed-in Firebase.\");\r\n        }\r\n      });\r\n  };\r\n\r\n  const signInWithGoogleAsync = async () => {\r\n    // console.log(\"here\");\r\n    // try {\r\n    //   const result = await Expo.Google.logInAsync({\r\n    //     androidClientId:\r\n    //       \"858762695063-8u1nmkpkcm54ierem1opbefatjb6qq1t.apps.googleusercontent.com\",\r\n    //     behavior: \"web\",\r\n    //     scopes: [\"profile\", \"email\"],\r\n    //   });\r\n    //   console.log(\"empty\");\r\n    //   console.log(result);\r\n\r\n    //   if (result.type === \"success\") {\r\n    //     onSignIn(result);\r\n    //     console.log(\"got access\");\r\n    //     return result.accessToken;\r\n    //   } else {\r\n    //     console.log(\"canncelled\");\r\n    //     return { cancelled: true };\r\n    //   }\r\n    // } catch (e) {\r\n    //   console.log(\"error\");\r\n    //   console.log(e);\r\n    //   return { error: true };\r\n    // }\r\n\r\n    console.log(\"new attempt\");\r\n    try {\r\n      const { type, accessToken, user } = await Google.logInAsync({\r\n        androidClientId:\r\n          \"858762695063-8u1nmkpkcm54ierem1opbefatjb6qq1t.apps.googleusercontent.com\",\r\n        behavior: \"web\",\r\n        scopes: [\"profile\", \"email\"],\r\n      });\r\n\r\n      if (type === \"success\") {\r\n        /* `accessToken` is now valid and can be used to get data from the Google API with HTTP requests */\r\n        onSignIn(result);\r\n        console.log(user);\r\n      }\r\n    } catch (e) {\r\n      console.log(\"error\");\r\n      console.log(e);\r\n      return { error: true };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n      <Button\r\n        title=\"Sign in with Google\"\r\n        onPress={() => {\r\n          signInWithGoogleAsync();\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n"]},"metadata":{},"sourceType":"module"}